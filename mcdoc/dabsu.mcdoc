use::java::data::dialog::Dialog
use::java::util::InclusiveRange
use::java::util::slot::SlottedItem
use::java::util::text::Text
use::java::world::component::CustomData
use::java::world::item::ItemStack
use::java::world::entity::EntityBase
use::java::world::entity::mob::MobBase
use::java::world::entity::mob::EntityEquipment
use::java::world::block::spawner::Spawner
use::java::world::block::spawner::SpawnPotential
use::mcdoc::dabsu_lang::lang
use::mcdoc::dabsu_lang::lines
use::mcdoc::dabsu_dialog::DialogMix
use::mcdoc::dabsu_misc::Misc
use::mcdoc::dabsu_misc::RunCustom

dispatch mcdoc:custom_data["spawner"] to Spawner
dispatch mcdoc:custom_data["normal"] to Spawner
dispatch mcdoc:custom_data["UUID"] to #[uuid] [int] @ 4
dispatch mcdoc:custom_data["in"] to #[id="dimension"] string
dispatch mcdoc:custom_data["type"] to int
dispatch mcdoc:custom_data["custom_name"] to string
dispatch mcdoc:custom_data["pos"] to Pos
dispatch mcdoc:custom_data["last_edit"] to struct{
    SpawnCount?: short,
	SpawnRange?: short,
    RequiredPlayerRange?: short,
}
dispatch mcdoc:custom_data["chunk"] to ChunkCoords
dispatch mcdoc:custom_data["dabsu"] to struct DabsuData {
    Potential?: SavedPotential,
    saved_potential?: byte @ 0..,
    is_wand?: byte @ 0..,
    cart?: struct{
        button?: struct{
            id?: string
        },
        stored?: struct{
            page?: int,
            slot?: byte,
        }
    },
    is_temp?: byte @ 0..,
}

struct form{
    form?:form,
    ...Spawner,
    weight?: int @ 0..,
    data?: struct SpawnEntry{
        entity: AnyEntity,
	    custom_spawn_rules?: struct CustomSpawnRules {
	        block_light_limit?: InclusiveRange<int @ 0..15>,
	        sky_light_limit?: InclusiveRange<int @ 0..15>,
        },
	    equipment?: SpawnEquipment,
    },
    entity?: AnyEntity,
    loot_table?: #[id="loot_table"] string,
    pos1?: Pos,
    pos2?: Pos,
    index?: any,
    custom_spawn_rules?: CustomSpawnRules,
    equipment?: SpawnEquipment,
    tag?: any,
    use?: any,
    attribute?: struct{
        [#[id="attribute"] string]?: (string|double)
    }
}




dispatch minecraft:storage["dabsu:save"] to struct {
    item?: [struct{
        id?: int,
        data?: [SlottedItem<byte @ -106..200>]
    }],
    run?: any,
    temp?: any,
    single?: SlottedItem<byte @ -106..200>,
    list?: [SlottedItem<byte @ -106..200>],
}

dispatch minecraft:storage["dabsu:run"] to struct {
    ...Misc,
    item?: SlottedItem<byte @ -106..200>,
    lang?: struct{[lang]?: lines, this?:lines},
    equipment?: EntityEquipment,
    hold?: [ObjectDimension],
    result?: [ObjectDimension],
    entity_data?: #[canonical] AnyEntity,
    entity_list?: [AnyEntity],
    spawner?: Spawner,
    element?: SpawnPotential,
    defaultSpawner?: Spawner,
    defaultElement?: SpawnPotential,
    templist?: [SpawnPotential],
    Dimensions?: [ObjectDimension],
    ram?: [ObjectDimension],
    Chunks?: [ObjectChunk],
    Selected?: [ObjectDimension],
    Provided?: [ObjectDimension],
    Queue?:[QueueTask],
    Main?: QueueTask,
    buffer?: [#[uuid] [int] @ 4],
    potential?: [SavedPotential],
    saved_potential?: SavedPotential,
    data?: CustomData,
    parsing?: struct{
        dimension?: [ObjectDimension],
        chunk?: [ObjectChunk],
        object?: [SavedSpawner],
        buffer?: [ObjectChunkForceLoad],
    },
    this?: struct{
        dimension?: ObjectDimension,
        chunk?: ObjectChunk,
        object?: SavedSpawner,
        buffer?: [ObjectChunkForceLoad],
    },
    lines?: lines,
    input?: struct{
        key?: string
    },
    dialog?: struct{
        [string]?: DialogMix
    },
    form?: form,
}

struct QueueTask{
    targets?: [ObjectDimension],
    cmd?: RunCustom,
    operator?: (enum(string){SYSTEM = "SYSTEM"}|#[uuid] string),
    type?: enum(string) QueueTaskType{
        main = "main",
        personal = "personal",
        optimize = "optimize"
    }
}

struct AnyEntity {
	/// The ID of this entity. Not present on player entities.
	id: #[id="entity_type"] string,
	...minecraft:entity[[id]],
    ...MobBase,
}

struct ObjectDimension{
    in?: #[id="dimension"] string,
    mark?: byte,
    Chunks?: [ObjectChunk],
}

struct ObjectChunkForceLoad{
    ...ObjectChunk,
    loaded?: byte @ 1,
}

struct ObjectChunk{
    ...ChunkCoords,
    mark?: byte,
    Objects?: [SavedSpawner],
}

struct SavedSpawner{
    Pos?: struct Pos{
        x?: int,
        y?: int,
        z?: int,
    },
    UUID?: #[uuid] [int] @ 4,
    sUUID?: #[uuid] string,
    type?: int,
    mark?: byte,
}

struct SavedPotential{
    type?: int,
    Potential?: [SpawnPotential]
}

struct ChunkCoords{
    x?: int,
    z?: int,
}

struct SpawnEquipment {
	loot_table: #[id="loot_table"] string,
	slot_drop_chances: (
		float @ 0..1 |
		struct {
			[EquipmentSlot]: float @ 0..1,
		} |
	),
}

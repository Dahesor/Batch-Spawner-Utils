use::java::util::text::Text
use ::java::world::component::CustomData
use::java::world::item::ItemStack
use::java::world::entity::EntityBase
use::java::world::entity::mob::MobBase
use::java::world::entity::mob::EntityEquipment
use::java::world::block::spawner::Spawner
use::java::world::block::spawner::SpawnPotential
use::java::util::slot::SlottedItem
use::java::data::dialog::Dialog
use ::java::util::InclusiveRange


use::mcdoc::dabsu_lang::lang
use::mcdoc::dabsu_lang::key
use::mcdoc::dabsu_lang::lines
use::mcdoc::dabsu_dialog::DialogMix

dispatch mcdoc:custom_data["spawner"] to Spawner
dispatch mcdoc:custom_data["UUID"] to #[uuid] [int] @ 4
dispatch mcdoc:custom_data["in"] to #[id="dimension"] string
dispatch mcdoc:custom_data["type"] to int
dispatch mcdoc:custom_data["custom_name"] to string
dispatch mcdoc:custom_data["pos"] to Pos
dispatch mcdoc:custom_data["chunk"] to ChunkCoords
dispatch mcdoc:custom_data["dabsu"] to struct DabsuData {
    Potential?: SavedPotential,
    saved_potential?: byte @ 0..,
    is_wand?: byte @ 0..,
    cart?: struct{
        button?: struct{
            id?: string
        },
        stored?: struct{
            page?: int,
            slot?: byte,
        }
    },
    is_temp?: byte @ 0..,
}

dispatch minecraft:storage["dabsu:save"] to struct {
    item?: [struct{
        id?: int,
        data?: [SlottedItem<byte @ -106..200>]
    }],
    run?: any,
    temp?: any,
    single?: SlottedItem<byte @ -106..200>,
    list?: [SlottedItem<byte @ -106..200>],
}

dispatch minecraft:storage["dabsu:run"] to struct {
    att?:struct{
        damage?: double,
        armor?: double,
        toughness?: double,
    },
    num?:struct{
        dam_i?: int,
        dam_f?: int,
        arm_i?: int,
        arm_f?: int,
        amt_i?: int,
        amt_f?: int,
        hp?: (int|string),
    },
    item?: SlottedItem<byte @ -106..200>,
    lang?: struct{[lang]?: lines, this?:lines},
    tellraw?: Text,
    text?: Text,
    equipment?: EntityEquipment,
    new_name?: Text,
    joint?: [Text],
    run?: any,
    xz?: any,
    temp2?: any,
    type?: struct{this?:int},
    in?: #[id="dimension"] string,
    temp?: any,
    hold?: [ObjectDimension],
    test?: any,
    entity_data?: #[canonical] AnyEntity,
    entity_list?: [AnyEntity],
    spawner?: Spawner,
    element?: SpawnPotential,
    defaultSpawner?: Spawner,
    defaultElement?: SpawnPotential,
    id?: #[id="entity_type"] string,
    translate?: #[translation_key] string,
    Dimensions?: [ObjectDimension],
    ram?: [ObjectDimension],
    Chunks?: [ObjectChunk],
    Selected?: [ObjectDimension],
    buffer?: [#[uuid] [int] @ 4],
    potential?: [SavedPotential],
    saved_potential?: SavedPotential,
    data?: CustomData,
    exe?: struct{
        command?: #[command] string,
    },
    parsing?: struct{
        dimension?: [ObjectDimension],
        chunk?: [ObjectChunk],
        object?: [SavedSpawner],
        buffer?: [ObjectChunkForceLoad],
    },
    this?: struct{
        dimension?: ObjectDimension,
        chunk?: ObjectChunk,
        object?: SavedSpawner,
        buffer?: [ObjectChunkForceLoad],
    },
    lines?: lines,
    input?: struct{
        key?: key
    },
    dialog?: struct{
        [string]?: DialogMix
    },
    final?: string,
    nbt_to_string?: struct{
        input?: any,
        output?: string,
    },
    form?:struct{
        ...Spawner,
        weight?: int @ 0..,
        data?: struct SpawnEntry{
            entity: AnyEntity,
	        custom_spawn_rules?: struct CustomSpawnRules {
	            block_light_limit?: InclusiveRange<int @ 0..15>,
	            sky_light_limit?: InclusiveRange<int @ 0..15>,
            },
	        equipment?: SpawnEquipment,
        },
        entity?: AnyEntity,
        loot_table?: #[id="loot_table"] string,
        pos1?: Pos,
        pos2?: Pos,
        index?: any,
        custom_spawn_rules?: CustomSpawnRules
    },
    index?: struct{
        index?: int,
    },
    string_to_num?: string,
    char?: struct{
        [string]?: string @ 1
    },
    run_custom?: struct{
        run?: #[command] string,
    },
}

struct AnyEntity {
	/// The ID of this entity. Not present on player entities.
	id: #[id="entity_type"] string,
	...minecraft:entity[[id]],
    ...MobBase,
}

struct ObjectDimension{
    in?: #[id="dimension"] string,
    Chunks?: [ObjectChunk],
}

struct ObjectChunkForceLoad{
    ...ObjectChunk,
    loaded?: byte @ 1,
}

struct ObjectChunk{
    ...ChunkCoords,
    Objects?: [SavedSpawner],
}

struct SavedSpawner{
    Pos?: struct Pos{
        x?: int,
        y?: int,
        z?: int,
    },
    UUID?: #[uuid] [int] @ 4,
    sUUID?: #[uuid] string,
    type?: int,
}

struct SavedPotential{
    type?: int,
    Potential?: [SpawnPotential]
}

struct ChunkCoords{
    x?: int,
    z?: int,
}

struct SpawnEquipment {
	loot_table: #[id="loot_table"] string,
	slot_drop_chances: (
		float @ 0..1 |
		struct {
			[EquipmentSlot]: float @ 0..1,
		} |
	),
}
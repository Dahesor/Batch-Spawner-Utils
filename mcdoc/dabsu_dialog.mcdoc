use ::java::util::text::Text
use ::java::util::text::ClickEvent
use ::java::data::dialog::Dialog
use ::java::world::item::ItemStack


struct DialogMix {
	type?: #[id="dialog_type"] string,
	title?: Text,
	/// Name to be used for a button leading to this dialog.
	/// If not present, `title` will be used instead.
	external_title?: Text,
	body?: (DialogBodyMix | [DialogBodyMix]),
	// TODO: check if this field accepts single InputControl like the body field
	inputs?: [InputControl],
	/// Whether the dialog can be closed with ESC key.
	/// Defaults to `true`.
	can_close_with_escape?: boolean,
	/// Whether the dialog should pause the game in single-player mode.
	/// Defaults to `true`.
	pause?: boolean,
	/// An additional operation performed on dialog after click or submit actions.
	/// Defaults to `close`.
	after_action?: AfterAction,
	action?: Button,
	yes?: Button,
	/// This action is also used for ESC-triggered exit.
	no?: Button,
	/// The button in footer.
	/// The action is also used for ESC-triggered exit.
	exit_action?: Button,
	/// The number of columns.
	/// Defaults to 2.
	columns?: int @ 1..,
	actions?: [Button] @ 1..,
	button_width?: int @ 1..,
	dialogs?: (
		[(#[id="dialog"] string | Dialog)] |
		#[id=(registry="dialog", tags="allowed")] string |
		Dialog |
	),
}

enum(string) AfterAction {
	/// Closes the dialog.
	/// Returns to the previous non-dialog screen, if any.
	Close = "close",
	/// Does nothing.
	/// Only available if `pause` is set to `false`.
	None = "none",
	/// Replaces the dialog with a "Waiting for Response" screen.
	/// The waiting screen unpauses the game in single-player mode.
	WaitForResponse = "wait_for_response",
}

struct Button {
	label?: Text,
	tooltip?: Text,
	/// Width of the button.
	/// Defaults to 150.
	width?: int @ 1..1024,
	/// If not present, clicking button will simply close dialog without any action.
	action?: ClickActionMix,
}

struct InputControl {
	type?: #[id="input_control_type"] string,
	// TODO: Narrowing the type here would require the weird JSON IMP Doc stuff that we don't have yet or some really advanced specialized attribute nonsense
	/// The input key, which is used to build macro command and generate custom action payload.
	key?: ((#[match_regex="^[A-Za-z0-9_]*$"] string @ 1..) | mcdoc:custom_dynamic_event_keys[%fallback]),
		/// Defaults to 200.
	width?: int @ 1..1024,
	/// Label displayed to the left of control.
	label?: Text,
	/// Defaults to `true`.
	label_visible?: boolean,
	/// Initial contents of the input.
	initial?: any,
	/// Maximum length of input
	/// Defaults to 32.
	max_length?: int @ 1..,
	/// If present, allows users to input multiple lines.
	multiline?: struct MultiLine {
		max_lines?: int @ 1..,
		/// Height of the input.
		/// If this field is not present:
		/// - If `max_lines` is present, the height will be chosen to fit the maximum number of lines.
		/// - If `max_lines` is also not present, the height will be chosen to fit 4 lines.
		height?: int @ 1..512,
	},
	/// String to send when the control is checked.
	/// Defaults to `"true"`.
	on_true?: string,
	/// String to send when the control is unchecked.
	/// Defaults to `"false"`.
	on_false?: string,
	options?: [(Option | string)] @ 1..,
	/// The translation to be used for building label.
	/// `%1$s` is replaced by `label`; `%2$s` is replaced by current value of the slider.
	/// Defaults to `options.generic_value`.
	label_format?: #[translation_key] string,
	/// Start value, inclusive.
	start?: float,
	/// End value, inclusive.
	end?: float,
	/// Step size of the input.
	/// If not present, any value from range is allowed.
	step?: float @ 0<..,
}

struct Option {
	/// String to send on submit.
	id?: string,
	/// Label displayed on the button.
	/// When not present, `id` will be used instead.
	display?: Text,
	// TODO: implement "one hot" check here if possible
	/// Whether this option is the initial value.
	/// Only one option can have this field set to `true`.
	initial?: boolean,
}

struct ClickActionMix {
	template?: #[command(macro="implicit")] string,
	type?: #[id="dialog_action_type"] string,
	...minecraft:dialog_action[[type]],
}

struct DialogBodyMix {
	type?: #[id="dialog_body_type"] string,
	...PlainMessage,
	item?: ItemStack,
	// game code implementation shares the same PlainMessage codec so it's safe to reuse the type
	/// The description text rendered to the right of item.
	description?: (struct PlainMessage {
			/// A multiline label.
			/// Click events in the text trigger `after_action` like any other action.
			contents?: Text,
			/// Maximum width of message.
			/// Defaults to 200.
			width?: int @ 1..1024,
		} | Text),
	/// Whether count and damage bar are rendered over the item.
	/// Defaults to `true`.
	show_decorations?: boolean,
	/// Whether item tooltip shows up when the item is hovered.
	/// Defaults to `true`.
	show_tooltip?: boolean,
	/// Height of the item.
	/// Defaults to 16.
	height?: int @ 1..256,
}

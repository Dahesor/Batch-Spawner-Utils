use::java::util::text::Text
use::mcdoc::dabsu::QueueTaskType
use::java::world::entity::mob::Attribute
use::java::world::entity::mob::EntityEquipment
use ::java::data::trial_spawner::TrialSpawnerConfig

dispatch mcdoc:custom_data["shapes"] to TransformationShapes

struct Misc{
    attribute?: [Attribute],
    trial?: struct{
        normal_config?: (
		TrialSpawnerConfig |
		#[id="trial_spawner"] string |
	),
	ominous_config?: (
		TrialSpawnerConfig |
		#[id="trial_spawner"] string |
	),
    },
    index?: struct{
        index?: int,
    },
    string_to_num?: string,
    char?: struct{
        [string]?: string @ 1
    },
    run_custom?: struct RunCustom{
        run?: #[command] string,
        args?: (struct{[any]?:any}|enum(string){NONE="NONE"}),
    },
    final?: (Text),
    nbt_to_string?: struct{
        input?: any,
        output?: string,
    },
    nbt?: struct{obj?:struct{[any]:any},list?:[any],f?:float,f2?:float,i?:int,d?:double},
    exe?: struct exe{
        command?: #[command] string,
        args?: (struct{[any]?:any}|enum(string){NONE="NONE"}),
        x?: int,
        y?: int,
        z?: int,
        operator?: any,
        work_type?: QueueTaskType
    },
    proceed?: exe,
    tellraw?: Text,
    text?: Text,
    new_name?: Text,
    joint?: [Text],
    run?: any,
    xz?: any,
    temp2?: any,
    type?: struct{this?:int,list?:[int],parse?:[int]},
    in?: #[id="dimension"] string,
    temp?: any,
    test?: any,
    att?:struct{
        damage?: double,
        armor?: double,
        toughness?: double,
    },
    num?:struct{
        dam_i?: int,
        dam_f?: int,
        arm_i?: int,
        arm_f?: int,
        amt_i?: int,
        amt_f?: int,
        hp?: (int|string),
    },
    id?: #[id="entity_type"] string,
    translate?: #[translation_key] string,
    shape?: struct TransformationShapes{
        this?: Transformation,
        x?: Transformation,
        y?: Transformation,
        z?: Transformation,
        w?: Transformation,
        list?: [Transformation],
    }
}

type Transformation = (
	#[canonical] struct DecomposedTransformation {
		/// Translation in [x, y, z].
		translation?: [float] @ 3,
		/// Using this rotation is enough for most transformations.
		left_rotation?: Rotation,
		/// For more complex transformations. Applied **before** scaling.
		right_rotation?: Rotation,
		/// Scale in [x, y, z].
		scale?: [float] @ 3,
	} |
	([float] @ 16) |
)

type Rotation = (
	// Quaternion form (used for saving) in [x, y, z, w].
	[float] @ 4 |
	// Axis-angle form.
	AxisAngle |
)

struct AxisAngle {
	/// Local position of the axis in [x, y, z].
	axis: [float] @ 3,
	/// Angle to rotate around axis in radians.
	angle: float,
}